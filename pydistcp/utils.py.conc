#!/usr/bin/env python
# encoding: utf-8

from pywhdfs.utils import hglob
from threading import Lock
from progressbar import AnimatedMarker, Bar, FileTransferSpeed, Percentage, ProgressBar, RotatingMarker, Timer
import os.path as osp
import os
import sys

class _Progress(object):

  """Progress tracker callback.

  :param nbytes: Total number of bytes that will be transferred.
  :param nfiles: Total number of files that will be transferred.
    Defaults to standard error.

  """

  def __init__(self, nbytes, nfiles, files_stats):
    self._total_bytes = nbytes
    self._pending_files = nfiles
    self._transferring_files = 0
    self._complete_files = 0
    self._lock = Lock()
    self._data = {}
    self.files_progress = {}

    for stat in  files_stats:
      if stat['length'] and stat['length'] > 0:
        self.files_progress[stat['path']] = ProgressBar( 
                                                          widgets=[ stat['path']+': ',
                                                                    Percentage(), ' ',
                                                                    Bar( marker='-',left='[',right=']'), ' ',
                                                                    Timer(format='Time: %s'), ' ',
                                                                    FileTransferSpeed()
                                                                  ],
                                                          maxval=stat['length'])

    widgets = ['Progress: ', Percentage(), ' ', Bar(), ' ', Timer(), ' ', FileTransferSpeed()]
    self.pbar = ProgressBar(widgets=widgets, maxval=self._total_bytes).start()

  def __call__(self, hdfs_path, nbytes):
    # TODO: Improve lock granularity.
    with self._lock:
      data = self._data
      if hdfs_path not in data:
        if hdfs_path in self.files_progress:
          self.files_progress[hdfs_path].start()
        self._pending_files -= 1
        self._transferring_files += 1
      if nbytes == -1:
        if hdfs_path in self.files_progress:
          self.files_progress[hdfs_path].finish()
        self._transferring_files -= 1
        self._complete_files += 1
      else:
        data[hdfs_path] = nbytes
      if hdfs_path in self.files_progress:
        self.files_progress[hdfs_path].update(nbytes)
      self.pbar.update(sum(data.values()))

  def __del__(self):
    self.pbar.finish()

  @classmethod
  def from_hdfs(cls, client, hdfs_path):
    """Instantiate from remote path.
    :param client: HDFS client.
    :param hdfs_path: HDFS path.
    """

    total_content={'length': 0, 'fileCount': 0}
    stat_content=[]
    matches = [ upload_file for upload_file in hglob.glob(client, hdfs_path) ]
    for file_match in matches:
      file_content = client.content(file_match)
      total_content['length'] +=  file_content['length']
      total_content['fileCount'] +=  file_content['fileCount']
      stat_content.append({'path' : file_match, 'length' : file_content['length']})
    return cls(total_content['length'], total_content['fileCount'], stat_content)

  @classmethod
  def from_local(cls, local_path):
    """Instantiate from a local path.
    :param local_path: Local path.
    """
    stat_content=[]
    if osp.isdir(local_path):
      nbytes = 0
      nfiles = 0
      for dpath, _, fnames in os.walk(local_path):
        for fname in fnames:
          stat_content.append({'path' : osp.join(dpath, fname), 'length' : osp.getsize(osp.join(dpath, fname))})
          nbytes += osp.getsize(osp.join(dpath, fname))
          nfiles += 1
    elif osp.exists(local_path):
      stat_content.append({'path' : local_path, 'length' : osp.getsize(local_path)})
      nbytes = osp.getsize(local_path)
      nfiles = 1
    else:
      raise HdfsError('No file found at: %s', local_path)
    return cls(nbytes, nfiles, stat_content)